# -*- coding: utf-8 -*-
"""Airbnb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mSalIa_5dW_OfxWv0feBv_J8WjwTIKcY

# Data Exploration on NYC Airbnb
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
import seaborn as sns

airbnb=pd.read_csv("AB_NYC_2019.csv") 
airbnb.head(3)

airbnb.describe()

#checking amount of rows in given dataset to understand the size we are working with
len(airbnb)

#checking type of every column in the dataset
airbnb.dtypes

#finding out which columns have null values
airbnb.isnull().sum()

#dropping columns that are not significant or could be unethical to use for our future data exploration and predictions
airbnb.drop(['id','host_name','last_review'], axis=1, inplace=True)
airbnb.head(3)

#replacing all NaN values in 'reviews_per_month' with 0
airbnb.fillna({'reviews_per_month':0}, inplace=True)
airbnb.reviews_per_month.isnull().sum()

#unique values
airbnb.neighbourhood_group.unique()

len(airbnb.neighbourhood.unique())

#unique values of room_type as this column will appear very handy for later analysis
airbnb.room_type.unique()

"""### Exploring and Visualizing Data"""

top_host=airbnb.host_id.value_counts().head(10)
top_host

top_host_check=airbnb.calculated_host_listings_count.max()
top_host_check

#setting figure size for future visualizations
sns.set(rc={'figure.figsize':(10,10)})
sns.set_style('white')

top_host_df=pd.DataFrame(top_host)
top_host_df.reset_index(inplace=True)
top_host_df.rename(columns={'index':'Host_ID', 'host_id':'P_Count'}, inplace=True)
top_host_df

#Hosts with the most listings in NYC
viz_1=sns.barplot(x="Host_ID", y="P_Count", data=top_host_df,palette='seismic')
viz_1.set_title('Hosts with the most listings in NYC')
viz_1.set_ylabel('Count of listings')
viz_1.set_xlabel('Host IDs')
viz_1.set_xticklabels(viz_1.get_xticklabels(), rotation=45)
None

#let's find out more about our neiberhoods presented 'Brooklyn', 'Manhattan', 'Queens', 'Staten Island', and 'Bronx'

#Brooklyn
sub_1=airbnb.loc[airbnb['neighbourhood_group'] == 'Brooklyn']
price_sub1=sub_1[['price']]

#Manhattan
sub_2=airbnb.loc[airbnb['neighbourhood_group'] == 'Manhattan']
price_sub2=sub_2[['price']]

#Queens
sub_3=airbnb.loc[airbnb['neighbourhood_group'] == 'Queens']
price_sub3=sub_3[['price']]

#Staten Island
sub_4=airbnb.loc[airbnb['neighbourhood_group'] == 'Staten Island']
price_sub4=sub_4[['price']]

#Bronx
sub_5=airbnb.loc[airbnb['neighbourhood_group'] == 'Bronx']
price_sub5=sub_5[['price']]

#putting all the prices' dfs in the list
price_list_by_n=[price_sub1, price_sub2, price_sub3, price_sub4, price_sub5]

#creating an empty list that we will append later with price distributions for each neighbourhood_group
plbn2=[]

#creating list with known values in neighbourhood_group column
nei_list=['Brooklyn', 'Manhattan', 'Queens', 'Staten Island', 'Bronx']

#creating a for loop to get statistics for price ranges and append it to our empty list
for x in price_list_by_n:
    i=x.describe(percentiles=[.25, .50, .75])
    i=i.iloc[3:]
    i.reset_index(inplace=True)
    i.rename(columns={'index':'Stats'}, inplace=True)
    plbn2.append(i)
    
#changing names of the price column to the area name for easier reading of the table    
plbn2[0].rename(columns={'price':nei_list[0]}, inplace=True)
plbn2[1].rename(columns={'price':nei_list[1]}, inplace=True)
plbn2[2].rename(columns={'price':nei_list[2]}, inplace=True)
plbn2[3].rename(columns={'price':nei_list[3]}, inplace=True)
plbn2[4].rename(columns={'price':nei_list[4]}, inplace=True)

#finilizing our dataframe for final view    
stat_df=plbn2
stat_df=[df.set_index('Stats') for df in stat_df]
stat_df=stat_df[0].join(stat_df[1:])
stat_df

#creating a sub-dataframe with no extreme values / less than 500
sub_6=airbnb[airbnb.price < 500]

#using boxplot to showcase density and distribtuion of prices 
viz_2=sns.boxplot(data=sub_6, x='neighbourhood_group', y='price')
viz_2.set_title('Density and distribution of prices for each neighberhood_group')

#finding out top 10 neighbourhoods
airbnb.neighbourhood.value_counts().head(10)

#grabbing top 10 neighbourhoods for sub-dataframe
sub_7=airbnb.loc[airbnb['neighbourhood'].isin(['Williamsburg','Bedford-Stuyvesant','Harlem','Bushwick','Upper West Side',
'Hell\'s Kitchen','East Village','Upper East Side','Crown Heights','Midtown'])]

#using catplot to represent multiple interesting attributes together and a count
viz_3=sns.countplot(x='neighbourhood',data=sub_7, palette='Set2')
viz_3.set_xticklabels(viz_3.get_xticklabels(),rotation=90)
None

viz_4=sns.countplot(x='neighbourhood',hue='room_type',data=sub_7, palette='Set3')
viz_4.set_xticklabels(viz_3.get_xticklabels(),rotation=90)
None

#longtitude and latitude columns

#let's see how scatterplot will come out 
viz_4=sub_6.plot(kind='scatter', x='longitude', y='latitude', label='availability_365', c='price',
                  cmap=plt.get_cmap('jet'), colorbar=True, alpha=0.4, figsize=(10,8))
viz_4.legend()

#let's grab 10 most reviewed listings in NYC
top_reviewed_listings=airbnb.nlargest(10,'number_of_reviews')
top_reviewed_listings

notleft=sub_7[sub_7['availability_365']==1]
left=sub_7[sub_7['availability_365']==0]

sns.displot(left['price'])

sns.displot(notleft['price'])

price_avrg=top_reviewed_listings.price.mean()
print('Average price per night: {}'.format(price_avrg))

